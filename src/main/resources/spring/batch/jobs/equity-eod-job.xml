<?xml version="1.0" encoding="UTF-8"?>  

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	 xmlns:task="http://www.springframework.org/schema/task"  
    	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/task  
		http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<import resource="../config/context.xml" />
	<import resource="../config/database.xml" />

	<bean id="report" class="com.equities.batch.Report" scope="prototype" />
	<bean id="itemProcessor" class="com.equities.batch.EquityEodProcessor" />

	<batch:job id="eodBatchJob" restartable="true">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="csvFileItemReader" writer="compositeItemWriter"
					processor="itemProcessor" commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="csvFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="linesToSkip" value="1"></property>

		<property name="resource" value="classpath:#{jobParameters['FILE']}" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter">
							<util:constant
								static-field="org.springframework.batch.item.file.transform.DelimitedLineTokenizer.DELIMITER_COMMA" />
						</property>
						<property name="names"
							value="SYMBOL,SERIES,OPEN,HIGH,LOW,CLOSE,LAST,PREVCLOSE,TOTTRDQTY,TOTTRDVAL,TIMESTAMP,TOTALTRADES,ISIN," />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.equities.batch.ReportFieldSetMapper" />

					<!-- if no data type conversion, use BeanWrapperFieldSetMapper to map 
						by name <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"> 
						<property name="prototypeBeanName" value="report" /> </bean> -->
				</property>
			</bean>
		</property>

	</bean>

	<bean id="compositeItemWriter" class="com.equities.batch.EquityEodCompositeWriter">
		<property name="delegate1" ref="eodDataItemWriter"></property>
		<property name="delegate2" ref="insideDayWriter"></property>
		<property name="delegate3" ref="narrowRangeWriter"></property>

	</bean>


	<bean id="eodDataItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
	            <![CDATA[
	            insert into equities_eod_ohlc (SCRIPT_ISIN,TIMESTAMP,OPEN,HIGH,LOW,CLOSE,PREV_CLOSE,LAST_TRADED_PRICE,
	            TOTAL_TRADED_QTY,TOTAL_TRADED_VAL,TOTAL_TRADES) values
	            (:ISIN,:date,:openPrice,:highPrice,:lowPrice,:closePrice,:prevClosePrice,:lastTradedPrice,:totalTradedQty,
	            :totalTradedValue,:totalTrades)
	            ]]>
			</value>
		</property>
		<property name="itemSqlParameterSourceProvider" ref="paramsProvider"/>
		
	</bean>
	
	<bean id="insideDayWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
	            <![CDATA[
	            insert into pattern_inside_day_equities (SCRIPT_ISIN,TIMESTAMP) values
	            (:ISIN,:date)
	            ]]>
			</value>
		</property>
		<property name="itemSqlParameterSourceProvider" ref="paramsProvider"/>
		
	</bean>
	
	
	<bean id="narrowRangeWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
	            <![CDATA[
	            insert into pattern_narrow_range_equities (SCRIPT_ISIN,TIMESTAMP_EOD,NARROW_RANGE,TRUE_RANGE) values
	            (:ISIN,:date,:narrowRange,:trueRange)
	            ]]>
			</value>
		</property>
		<property name="itemSqlParameterSourceProvider" ref="paramsProvider"/>
		
	</bean>
	
	
	<bean id="paramsProvider"	class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />

	<bean id="myScheduler" class="com.equities.batch.MyScheduler" >
	<property name="jobLauncher" ref="jobLauncher"/>
	<property name="eodBatchJob" ref="eodBatchJob"/>
	</bean>
	<task:scheduled-tasks>
		<task:scheduled ref="myScheduler" method="run"	cron="45 30 16 * * 1-5" />
	</task:scheduled-tasks>

	<!-- <bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter"> 
		<property name="resource" value="file:xml/outputs/report.xml" /> <property 
		name="marshaller" ref="reportMarshaller" /> <property name="rootTagName" 
		value="report" /> </bean> <bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> 
		<property name="classesToBeBound"> <list> <value>com.equities.batch.Report</value> 
		</list> </property> </bean> -->
</beans>